// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // A_REGISTER ***************************************************************
    // A multiplexor accepts the instruction and prev ALU output
    // If instruction[15] == 0, choose instruction, else ALU output
    And(a=instruction[15], b=true, out=isCinstruction);
    Not(in=isCinstruction, out=isAinstruction);
    
    // Choose instructrion or ALU output based on what type of instruction it is

    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=ALUOutput, sel=isCinstruction, out=valORaddress);

    // Load valORaddress into A_REGISTER if isAinstruction OR destination of
    // c-instruction includes A (d1 bit signals this).
    
    And(a=true, b=instruction[5], out=isAdestination);
    Or(a=isAinstruction, b=isAdestination, out=shouldloadA);
    ARegister(in=valORaddress, load=shouldloadA, out[0..14]=Aregister, out[0..14]=addressM);
    // A_REGISTER ***************************************************************

    // D_REGISTER ***************************************************************
    // Load D register with ALU value if c-instruction AND destination includes D (d2 bit)
    And(a=true, b=instruction[4], out=isDdestination);
    And(a=isCinstruction, b=isDdestination, out=shouldLoadD);
    DRegister(in=ALUOutput, load=shouldLoadD, out=DRegister);
    // D_REGISTER ***************************************************************

    // ALU **********************************************************************
    // A multiplexor chooses between inM and Aregister based on 'a' instruction bit, which
    // dictates whether an ALU operation includes M or A.
    And(a=true, b=instruction[12], out=isMcomputation); 
    Mux16(a[15]=false, a[0..14]=Aregister, b=inM, sel=isMcomputation, out=AorM);
    ALU(
        x=DRegister, 
        y=AorM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, 
        out=ALUOutput,
        zr=zr,
        ng=ng 
    );
    // ALU **********************************************************************

    // PC **********************************************************************
    // Jumps really map to the load command of the PC, and is determined by testing j-bits against ALU output
    Or(a=zr, b=ng, out=ALUisLTE);
    Not(in=ALUisLTE, out=ALUisGT);
    
    // Map instruction bits to j variables for readability
    And(a=instruction[0], b=true, out=j3);
    And(a=instruction[1], b=true, out=j2);
    And(a=instruction[2], b=true, out=j1);

    // if ALUOutput is zero, j2 needs to be 1
    And(a=j2, b=zr, out=jumpOnEqual);

    // If ALUOutput is less than zero, j1 has to be 1
    And(a=j1, b=ng, out=jumpOnLT);

    // If ALUOutput is greater than 0, j3 needs to be 1
    And(a=j3, b=ALUisGT, out=jumpOnGT);

    // if jumpOnEqual or jumpOnLT is satisfied, we can jump
    Or(a=jumpOnEqual, b=jumpOnLT, out=jumpOnLTE);

    // if jumpOnLTE or jumpOnGT is satisfied, we can jump
    Or(a=jumpOnLTE, b=jumpOnGT, out=canJump);

    // But only if it's a C instruction
    And(a=isCinstruction, b=canJump, out=shouldLoad);
    Not(in=shouldLoad, out=shouldInc);

    PC(in[0..14]=Aregister, reset=reset, load=shouldLoad, inc=shouldInc, out[0..14]=pc);
    // PC **********************************************************************

    // Should write to M if destination bit includes M (d3)
    And(a=instruction[3], b=isCinstruction, out=writeM);
}